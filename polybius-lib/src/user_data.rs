use std::fmt;

use rand::Rng;

use crate::password_bits::PasswordBit;
use rand::seq::SliceRandom;

/// Represents the types of numbers that UserData can store. These types are used to specify the significance of the numbers to the user
pub enum NumType {
    BirthYear,
    BirthMonth,
    BirthDay,
    CurrentYear,
    RelevantNumber,
}

impl fmt::Display for NumType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            NumType::BirthYear => write!(f, "Birth Year"),
            NumType::BirthMonth => write!(f, "Birth Month"),
            NumType::BirthDay => write!(f, "Birth Day"),
            NumType::CurrentYear => write!(f, "Current Year"),
            NumType::RelevantNumber => write!(f, "Relevant Number"),
        }
    }
}

/// Represents a numeric value along with its type.
pub struct Number {
    /// The numeric value
    pub value: u16,
    /// The type of the number
    pub num_type: NumType,
}

impl Number {
    /// Creates a new Number instance with the given value and type.
    pub fn new(value: u16, num_type: NumType) -> Self {
        Self { value, num_type }
    }
}

/// Contains all the user information required for the password generation process.
pub struct UserData {
    /// A poll of positive numeric values and their importance to the user
    pub numbers_poll: Vec<Number>,
    /// A poll of strings of importance to the user
    pub text_poll: Vec<String>,
}

impl UserData {
    /// Creates a new UserData instance
    pub fn new(numbers_poll: Vec<Number>, text_poll: Vec<String>) -> Self {
        Self {
            numbers_poll,
            text_poll,
        }
    }

    /// Generates a password based on the user data
    /// The password is generated by concatenating random numeric values in the numbers_poll and random acronyms of the strings in the text_poll
    pub fn generate_password(&self, length: u8) -> String {
        let mut bits: Vec<PasswordBit> = Vec::new();
        let mut rng = rand::thread_rng();

        // Choose at randomly some numbers and some strings from the polls and convert them to PasswordBits
        for _ in 0..length {
            if rng.gen::<bool>() {
                let number = self.numbers_poll.choose(&mut rng).unwrap();
                bits.push(PasswordBit::number_bit(number));
            } else {
                let text = self.text_poll.choose(&mut rng).unwrap();
                bits.push(PasswordBit::string_bit(text));
            }
        }

        // Concatenate the bits to form the password
        bits.iter().map(|bit| bit.bits.as_str()).collect()
    }
}

impl Default for UserData {
    /// Creates a new UserData instance with empty polls
    fn default() -> Self {
        Self {
            numbers_poll: Default::default(),
            text_poll: Default::default(),
        }
    }
}
